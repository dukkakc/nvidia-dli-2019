Bootstrap: debootstrap
MirrorURL: http://us.archive.ubuntu.com/ubuntu
OSVersion: xenial

%labels

    APPLICATION_NAME rapids
    APPLICATION_VERSION 0.8.0
    APPLICATION_URL https://rapids.ai/

    SYSTEM_NAME comet
    SYSTEM_SINGULARITY_VERSION 2.6.1
    SYSTEM_URL http://www.sdsc.edu/support/user_guides/comet.html

    SINGULARITY_IMAGE_SIZE 8192

    AUTHOR_NAME Marty Kandes
    AUTHOR_EMAIL mkandes@sdsc.edu

    LAST_UPDATED 20190816

%setup

%environment

    # Set system locale
    export LC_ALL=C

    # Set paths to CUDA binaries and libraries
    export PATH="/usr/local/cuda-9.2/bin${PATH:+:${PATH}}"
    export LD_LIBRARY_PATH="/usr/local/cuda-9.2/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"
    export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/cuda/extras/CUPTI/lib64"
    
    # Set other CUDA-related environment variables
    export CUDA_HOME='/usr/local/cuda-9.2'
    export CUDA_BIN_PATH="${CUDA_HOME}/bin"
    export NUMBAPRO_NVVM="${CUDA_HOME}/nvvm/lib64/libnvvm.so"
    export NUMBAPRO_LIBDEVICE="${CUDA_HOME}/nvvm/libdevice"
    export CUDF_HOME='/opt/cudf'

    # Set default miniconda environment
    export CONDA_PREFIX='/opt/miniconda3'
    # >>> conda initialize >>>
    # !! Contents within this block are managed by 'conda init' !!
    __conda_setup="$('/opt/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
    else
        if [ -f "/opt/miniconda3/etc/profile.d/conda.sh" ]; then
            . "/opt/miniconda3/etc/profile.d/conda.sh"
        else
            export PATH="/opt/miniconda3/bin:$PATH"
        fi
    fi
    unset __conda_setup
    # <<< conda initialize <<<

%post -c /bin/bash

    # Set system locale
    export LC_ALL=C

    # Install system metapackages
    apt-get -y install ubuntu-standard
    apt-get -y install ubuntu-server

    # Add repositories
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION} main"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION} universe"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION} multiverse"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION} restricted"

    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-updates main"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-updates universe"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-updates multiverse"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-updates restricted"

    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-backports main"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-backports universe"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-backports multiverse"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-backports restricted"

    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-security main"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-security universe"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-security multiverse"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-security restricted"

    # Upgrade all packages to their latest versions
    apt-get -y update && apt-get -y upgrade

    # Install common packages from 'main'
    apt-get -y install autoconf
    apt-get -y install automake
    apt-get -y install build-essential
    apt-get -y install cmake
    apt-get -y install libtool
    apt-get -y install gfortran
    apt-get -y install pkg-config
    apt-get -y install wget
    apt-get -y install zip

    # Install expect to automate responses for interactive build questions
    apt-get -y install expect

    # Make filesystem mount points
    mkdir /cvmfs /oasis /projects /scratch

    # Use /tmp to store temporary files within the container during the
    # bootstraping process
    cd /tmp

    # Install miniconda3
    wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
    chmod +x Miniconda3-latest-Linux-x86_64.sh
    ./Miniconda3-latest-Linux-x86_64.sh -b -p /opt/miniconda3

    # Set default miniconda environment
    export CONDA_PREFIX='/opt/miniconda3'
    # >>> conda initialize >>>
    # !! Contents within this block are managed by 'conda init' !!
    __conda_setup="$('/opt/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
    else
        if [ -f "/opt/miniconda3/etc/profile.d/conda.sh" ]; then
            . "/opt/miniconda3/etc/profile.d/conda.sh"
        else
            export PATH="/opt/miniconda3/bin:$PATH"
        fi
    fi
    unset __conda_setup
    # <<< conda initialize <<<

    # Location of NVIDIA repositories
    declare -r NVIDIA_ROOT_URL='http://developer.download.nvidia.com/compute'
    declare -r CUDA_REPO_URL="${NVIDIA_ROOT_URL}/cuda/repos/ubuntu1604/x86_64"
    declare -r ML_REPO_URL="${NVIDIA_ROOT_URL}/machine-learning/repos/ubuntu1604/x86_64/"

    # Install NVIDIA package dependencies
    apt-get -y install x11-common
    apt-get -y install xserver-xorg-core
    apt-get -y install xserver-xorg-legacy
    apt-get -y install cmake
    apt-get -y install make
    apt-get -y install dkms
    apt-get -y install linux-libc-dev
    apt-get -y install libc6-dev
    apt-get -y install lib32gcc1
    apt-get -y install libc6-i386
    apt-get -y install libgl1
    apt-get -y install libwayland-client0
    apt-get -y install libwayland-server0
    apt-get -y install pkg-config
    apt-get -y install screen-resolution-extra
    apt-get -y install libvdpau1
    apt-get -y install libatk1.0-0
    apt-get -y install libcairo-gobject2
    apt-get -y install libcairo2
    apt-get -y install libfontconfig1
    apt-get -y install libgdk-pixbuf2.0-0
    apt-get -y install libgtk-3-0
    apt-get -y install libgtk2.0-0
    apt-get -y install libjansson4
    apt-get -y install freeglut3-dev
    apt-get -y install libx11-dev
    apt-get -y install libxmu-dev
    apt-get -y install libxi-dev
    apt-get -y install libglu1-mesa
    apt-get -y install libglu1-mesa-dev
    apt-get -y install default-jre

    # Download NVIDIA drivers, libraries, and packages
    wget --wait=10 "${CUDA_REPO_URL}/nvidia-396_396.26-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/nvidia-396-dev_396.26-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/nvidia-modprobe_396.26-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/libcuda1-396_396.26-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/nvidia-libopencl1-396_396.26-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/nvidia-opencl-icd-396_396.26-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/libxnvctrl0_396.26-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/nvidia-settings_396.26-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-drivers_396.26-1_amd64.deb"

    wget --wait=10 "${CUDA_REPO_URL}/cuda-license-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-misc-headers-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvcc-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cuobjdump-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvprune-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-compiler-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-core-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cudart-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-driver-dev-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cudart-dev-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvdisasm-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-gdb-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvprof-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-memcheck-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cupti-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-gpu-library-advisor-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvtx-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-command-line-tools-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvrtc-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvrtc-dev-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvml-dev-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvgraph-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvgraph-dev-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cusolver-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cusolver-dev-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cublas-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cublas-dev-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cufft-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cufft-dev-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-curand-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-curand-dev-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cusparse-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cusparse-dev-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-npp-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-npp-dev-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-samples-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-documentation-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nsight-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvvp-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-visual-tools-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-tools-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-libraries-dev-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-toolkit-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-libraries-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-runtime-9-2_9.2.88-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-demo-suite-9-2_9.2.88-1_amd64.deb"

    wget --wait=10 "${ML_REPO_URL}/libcudnn7_7.6.2.24-1+cuda9.2_amd64.deb"
    wget --wait=10 "${ML_REPO_URL}/libcudnn7-dev_7.6.2.24-1+cuda9.2_amd64.deb"

    wget --wait=10 "${ML_REPO_URL}/libnccl2_2.4.8-1+cuda9.2_amd64.deb"
    wget --wait=10 "${ML_REPO_URL}/libnccl-dev_2.4.8-1+cuda9.2_amd64.deb"

    # Fix for "update-alternatives: error: error creating symbolic link '/usr/lib/nvidia/alternate-install-present.dpkg-tmp': No such file or directory"
    mkdir -p /usr/lib/nvidia

    # Install NVIDIA drivers, libraries, and packages
    dpkg -i nvidia-396_396.26-0ubuntu1_amd64.deb
    dpkg -i nvidia-396-dev_396.26-0ubuntu1_amd64.deb
    dpkg -i nvidia-modprobe_396.26-0ubuntu1_amd64.deb
    dpkg -i libcuda1-396_396.26-0ubuntu1_amd64.deb
    dpkg -i nvidia-libopencl1-396_396.26-0ubuntu1_amd64.deb
    dpkg -i nvidia-opencl-icd-396_396.26-0ubuntu1_amd64.deb
    dpkg -i libxnvctrl0_396.26-0ubuntu1_amd64.deb
    dpkg -i nvidia-settings_396.26-0ubuntu1_amd64.deb
    dpkg -i cuda-drivers_396.26-1_amd64.deb

    dpkg -i cuda-license-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-misc-headers-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-nvcc-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-cuobjdump-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-nvprune-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-compiler-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-core-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-cudart-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-driver-dev-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-cudart-dev-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-nvdisasm-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-gdb-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-nvprof-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-memcheck-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-cupti-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-gpu-library-advisor-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-nvtx-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-command-line-tools-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-nvrtc-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-nvrtc-dev-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-nvml-dev-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-nvgraph-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-nvgraph-dev-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-cusolver-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-cusolver-dev-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-cublas-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-cublas-dev-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-cufft-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-cufft-dev-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-curand-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-curand-dev-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-cusparse-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-cusparse-dev-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-npp-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-npp-dev-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-samples-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-documentation-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-nsight-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-nvvp-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-visual-tools-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-tools-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-libraries-dev-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-toolkit-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-libraries-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-runtime-9-2_9.2.88-1_amd64.deb
    dpkg -i cuda-demo-suite-9-2_9.2.88-1_amd64.deb

    dpkg -i libcudnn7_7.6.2.24-1+cuda9.2_amd64.deb
    dpkg -i libcudnn7-dev_7.6.2.24-1+cuda9.2_amd64.deb

    dpkg -i libnccl2_2.4.8-1+cuda9.2_amd64.deb
    dpkg -i libnccl-dev_2.4.8-1+cuda9.2_amd64.deb

    # Set other CUDA-related environment variables
    export CUDA_VERSION='9.2.88'
    export CUDA_HOME='/usr/local/cuda-9.2'
    export NUMBAPRO_NVVM="${CUDA_HOME}/nvvm/lib64/libnvvm.so"
    export NUMBAPRO_LIBDEVICE="${CUDA_HOME}/nvvm/libdevice"

    # Install requirements/dependencies for RAPIDS
    conda install -y pip
    conda install -y pytest
    conda install -y cython
    conda install -y cmake
    pip install cmake_setuptools
    conda install -y numpy
    conda install -y numpydoc
    conda install -y pandas
    conda install -y sphinx
    conda install -y sphinx_rtd_theme
    conda install -y sphinxcontrib-websupport
    conda install -y -c conda-forge nbsphinx
    conda install -y -c conda-forge recommonmark
    conda install -y pandoc
    conda install -y s3fs
    conda install -y partd
    conda install -y moto
    conda install -y boto3
    conda install -y httpretty
    conda install -y flake8
    conda install -y black
    conda install -y isort
    conda install -y -c conda-forge pre_commit
    conda install -y dask
    conda install -y distributed
    conda install -y -c conda-forge dlpack
    conda install -y arrow-cpp
    conda install -y boost-cpp
    conda install -y -c conda-forge double-conversion
    conda install -y rapidjson
    conda install -y flatbuffers
    conda install -y hypothesis
    conda install -y numba
    conda install -y pyarrow
    conda install -y fastavro
    conda install -y notebook
    conda install -y zlib
    conda install -c conda-forge clangdev
    conda install -c conda-forge xgboost

    # Install other supporting software packages and libraries
    conda install -y matplotlib
    conda install -y jupyterhub
    conda install -y sympy
    conda install -y nose
    conda install -y scikit-image
    conda install -y nltk
    conda install -y statsmodels
    conda install -y biopython
    conda install -y h5py

    cd /opt

    export CONDA_PREFIX=/opt/miniconda3

    # Configure, build and install RAPIDS suite of GPU-acclerated libraries. 
    git clone --recurse-submodules https://github.com/rapidsai/rmm.git
    cd /opt/rmm
    git checkout v0.8.0
    mkdir /opt/rmm/build
    cd /opt/rmm/build
    cmake .. -DCMAKE_INSTALL_PREFIX="${CONDA_PREFIX}"
    make
    make install
    make rmm_python_cffi
    make rmm_install_python
  
    cd /opt

    git clone https://github.com/rapidsai/custrings.git
    cd /opt/custrings 
    git checkout v0.8.0
    sed -i 's/-gencode=arch=compute_50,code=sm_50/-gencode=arch=compute_37,code=sm_37/' /opt/custrings/cpp/CMakeLists.txt
    cd /opt/custrings/cpp
    mkdir /opt/custrings/cpp/build
    cd /opt/custrings/cpp/build
    cmake .. -DCMAKE_INSTALL_PREFIX="${CONDA_PREFIX}"
    make 
    make install

    cd /opt/custrings
    sed -i 's/-gencode=arch=compute_50,code=sm_50/-gencode=arch=compute_37,code=sm_37/' /opt/custrings/python/cpp/CMakeLists.txt
    cd /opt/custrings/python
    python setup.py install # --single-version-externally-managed --record=record.txt
 
    cd /opt

    export CUDF_HOME=/opt/cudf
    git clone https://github.com/rapidsai/cudf.git "${CUDF_HOME}"
    cd "${CUDF_HOME}"
    git checkout v0.8.0
    git submodule update --init --remote --recursive
    sed -i 's/set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -gencode=arch=compute_70,code=sm_70 -gencode=arch=compute_70,code=compute_70")/#set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -gencode=arch=compute_70,code=sm_70 -gencode=arch=compute_70,code=compute_70")/' cpp/CMakeLists.txt
    sed -i 's/set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -gencode=arch=compute_60,code=sm_60")/set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -gencode=arch=compute_37,code=sm_37 -gencode=arch=compute_60,code=sm_60 -gencode=arch=compute_70,code=sm_70")/' cpp/CMakeLists.txt
    sed -i 's/set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -gencode=arch=compute_70,code=sm_70 -gencode=arch=compute_70,code=compute_70")/#set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -gencode=arch=compute_70,code=sm_70 -gencode=arch=compute_70,code=compute_70")/' java/src/main/native/CMakeLists.txt
    sed -i 's/set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -gencode=arch=compute_60,code=sm_60")/set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -gencode=arch=compute_37,code=sm_37 -gencode=arch=compute_60,code=sm_60 -gencode=arch=compute_70,code=sm_70")/' java/src/main/native/CMakeLists.txt
    cd "${CUDF_HOME}/cpp"
    mkdir "${CUDF_HOME}/cpp/build"
    cd "${CUDF_HOME}/cpp/build"
    cmake .. -DCMAKE_INSTALL_PREFIX="${CONDA_PREFIX}"
    make
    make install

    cd "${CUDF_HOME}/python"
    python setup.py build_ext --inplace
    python setup.py install

    cd /opt

    # https://github.com/pism/pism/issues/356
    git clone --recurse-submodules https://github.com/rapidsai/cuml.git
    cd /opt/cuml
    git checkout v0.8.0
    cd /opt/cuml/cpp
    mkdir /opt/cuml/cpp/build
    cd /opt/cuml/cpp/build
    export CUDA_BIN_PATH="${CUDA_HOME}/bin"
    cmake .. -DCMAKE_INSTALL_PREFIX="${CONDA_PREFIX}" -DDISABLE_OPENMP='ON' -DBLAS_LIBRARIES="${CONDA_PREFIX}/lib/libmkl_rt.so" -DGPU_ARCHS='60;70' # cc37 does not work
    make 
    make install

    cd /opt/cuml/python
    python setup.py build_ext --inplace
    python setup.py install

    cd /opt

    export CUGRAPH_HOME='/opt/cugraph'
    git clone https://github.com/rapidsai/cugraph.git "${CUGRAPH_HOME}"
    cd "${CUGRAPH_HOME}"
    git checkout v0.8.0
    git submodule update --init --recursive
    sed -i 's/set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -gencode=arch=compute_70,code=sm_70 -gencode=arch=compute_70,code=compute_70")/#set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -gencode=arch=compute_70,code=sm_70 -gencode=arch=compute_70,code=compute_70")/' cpp/CMakeLists.txt
    sed -i 's/set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -gencode=arch=compute_60,code=sm_60")/set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -gencode=arch=compute_60,code=sm_60 -gencode=arch=compute_70,code=sm_70")/' cpp/CMakeLists.txt # cc37 does not work
    cd "${CUGRAPH_HOME}/cpp"
    mkdir "${CUGRAPH_HOME}/cpp/build"
    cd "${CUGRAPH_HOME}/cpp/build"
    cmake .. -DCMAKE_INSTALL_PREFIX="${CONDA_PREFIX}"
    make
    make install

    cd "${CUGRAPH_HOME}/python"
    python setup.py install

    cd /opt

    git clone https://github.com/rapidsai/dask-cuda.git
    cd /opt/dask-cuda
    git checkout v0.8.0
    python setup.py install

    cd /opt

    git clone https://github.com/rapidsai/dask-cudf
    cd /opt/dask-cudf
    git checkout v0.8.0
    pip install .

    cd /opt

    git clone https://github.com/rapidsai/dask-xgboost.git
    cd /opt/dask-xgboost
    python setup.py install

    cd /opt

    git clone https://github.com/rapidsai/dask-cuml.git
    cd /opt/dask-cuml
    git checkout v0.8.0
    python setup.py install

    cd /opt

    git clone https://github.com/rapidsai/dask-cugraph.git
    cd /opt/dask-cugraph/
    python setup.py install
    

    # Update database for mlocate
    updatedb

%files

%runscript

    echo "                                                "
    echo "      __________________  __  _______________   "
    echo "    -----/ ____/ __ \/  |/  / ____/_  __/       "
    echo "      --/ /   / / / / /|_/ / __/   / /          "
    echo "       / /___/ /_/ / /  / / /___  / /           "
    echo "       \____/\____/_/  /_/_____/ /_/            "
    echo "                                                "

%test
